// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// User Profile and Authentication
model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    bio           String?   @db.Text
    role          UserRole  @default(USER)
    language      Language  @default(ENGLISH)
    githubUrl     String?
    linkedinUrl   String?
    twitterUrl    String?
    website       String?

    // Relations
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    comments      Comment[]
    likes         Like[]
    views         View[]

    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
}

enum UserRole {
    USER
    ADMIN
    MODERATOR
}

enum Language {
    ENGLISH
    AMHARIC
    AFAAN_OROMOO
}

// Blog Post
model Post {
    id          String    @id @default(cuid())
    title       String
    slug        String    @unique
    content     String    @db.Text
    excerpt     String?   @db.Text
    published   Boolean   @default(false)
    featured    Boolean    @default(false)
    
    // SEO and Metadata
    metaTitle       String?
    metaDescription String?    @db.Text
    ogImage         String?

    // Relations
    author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId    String
    category    Category? @relation(fields: [categoryId], references: [id])
    categoryId  String?
    tags        Tag[]     @relation("PostToTag")
    comments    Comment[]
    likes       Like[]
    views       View[]

    // Timestamps
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    publishedAt DateTime?

    @@index([slug])
    @@index([authorId])
    @@index([categoryId])
}

// Categories
model Category {
    id          String   @id @default(cuid())
    name        String   @unique
    slug        String   @unique
    description String?  @db.Text
    posts       Post[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

// Tags
model Tag {
    id          String   @id @default(cuid())
    name        String   @unique
    slug        String   @unique
    description String?  @db.Text
    posts       Post[]   @relation("PostToTag")
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

// Comments
model Comment {
    id        String    @id @default(cuid())
    content   String    @db.Text
    post      Post      @relation(fields: [postId], references: [id])
    postId    String
    author    User      @relation(fields: [authorId], references: [id])
    authorId  String
    parent    Comment?  @relation("CommentToComment", fields: [parentId], references: [id])
    parentId  String?
    replies   Comment[] @relation("CommentToComment")

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt

    @@index([postId])
    @@index([authorId])
}

// Engagement
model Like {
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    post      Post     @relation(fields: [postId], references: [id])
    postId    String
    createdAt DateTime @default(now())

    @@id([userId, postId])
}

model View {
    id        String   @id @default(cuid())
    user      User?    @relation(fields: [userId], references: [id])
    userId    String?
    post      Post     @relation(fields: [postId], references: [id])
    postId    String
    createdAt DateTime @default(now())

    @@index([postId])
    @@index([userId])
}

// NextAuth Models
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token           String?  @db.Text
    access_token            String?  @db.Text
    expires_at              Int?
    token_type              String?
    scope                   String?
    id_token                String?  @db.Text
    session_state           String?
    user                    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
